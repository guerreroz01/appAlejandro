import OpenAI from "openai";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "",
});

// üîß Configuraci√≥n del mensaje del sistema
const systemContentMessage = `
1. Se te dar√° una lista de preguntas y respuestas.
2. Bas√°ndote en las preguntas y respuestas suministradas, proporcionar√°s 4 carreras universitarias. 
3. Cada carrera incluir√° su nombre, una breve descripci√≥n del por qu√© ha sido elegida y su porcentaje basado en el total (los porcentajes no ser√°n en ning√∫n caso iguales entre si y mientras mayor sea la diferencia mejor, los porcentajes es mejor que no sean n√∫meros redondos).
4. Responder√°s √∫nicamente con un objeto JSON en el siguiente formato: 
[
  { "name": "", "description": "", "percent": "" },
  { "name": "", "description": "", "percent": "" },
  { "name": "", "description": "", "percent": "" },
  { "name": "", "description": "", "percent": "" }
]
5. No incluir√°s ning√∫n otro texto o comentario fuera del formato JSON.
`;

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const allAnswers = body.answers;

    const response = await client.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemContentMessage },
        {
          role: "user",
          content: `Bas√°ndote en las siguientes preguntas, ¬øqu√© 4 carreras universitarias recomiendas? 
          Responde en el formato JSON indicado sin comentarios adicionales. 
          ${JSON.stringify(allAnswers)}`,
        },
      ],
    });

    const responseContent = response.choices[0]?.message?.content?.trim() || "";

    if (!responseContent) {
      throw new Error("La respuesta de OpenAI est√° vac√≠a.");
    }

    type ApiResponseArray = {
      name: string;
      description: string;
      percent: string;
    }[];

    function normalizeApiResponse(apiResponse: string): ApiResponseArray {
      try {
        // üîπ Eliminar etiquetas Markdown que OpenAI pueda agregar
        let cleanedResponse = apiResponse.replace(/```json|```/g, "").trim();

        console.log("üìú Respuesta limpiada:", cleanedResponse);

        // üîπ Intentar parsear la respuesta
        const parsedResponse = JSON.parse(cleanedResponse);

        if (!Array.isArray(parsedResponse)) {
          console.error(
            "‚ùå Error: la respuesta no es un array v√°lido:",
            parsedResponse
          );
          return [];
        }

        return parsedResponse;
      } catch (error) {
        console.error("‚ùå Error al parsear JSON:", error);
        return [];
      }
    }

    return Response.json({
      success: true,
      content: normalizeApiResponse(responseContent),
    });
  } catch (error) {
    console.error("‚ùå Error en el procesamiento:", error);
    return Response.json(
      {
        success: false,
        error: "Ocurri√≥ un error inesperado al procesar la solicitud.",
      },
      { status: 500 }
    );
  }
}
